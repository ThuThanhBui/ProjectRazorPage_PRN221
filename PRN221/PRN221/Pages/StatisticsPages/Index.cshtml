@page
@model PRN221.Pages.StatisticsPages.IndexModel

@{
    ViewData["Title"] = "Statistics Dashboard";
    Layout = "~/Pages/Shared/_LayoutManage.cshtml";
}

<h1>Statistics Dashboard</h1>
<hr />

<!-- Stock Quantities Charts Section -->
<div class="chart-container">
    <div class="chart-wrapper">
        <h3>Top 5 Products by Stock Quantity</h3>
        <canvas id="topStockChart" width="400" height="200"></canvas>
    </div>
    <div class="chart-wrapper">
        <h3>Bottom 5 Products by Stock Quantity</h3>
        <canvas id="bottomStockChart" width="400" height="200"></canvas>
    </div>
</div>

<!-- Prices Charts Section -->
<hr />
<div class="chart-container">
    <div class="chart-wrapper">
        <h3>Top 5 Highest Prices</h3>
        <canvas id="highestPriceChart" width="400" height="200"></canvas>
    </div>
    <div class="chart-wrapper">
        <h3>Top 5 Lowest Prices</h3>
        <canvas id="lowestPriceChart" width="400" height="200"></canvas>
    </div>
</div>

<!-- Ratings Charts Section -->
<hr />
<div class="chart-container">
    <div class="chart-wrapper">
        <h3>Top 5 Highest Ratings</h3>
        <canvas id="highestRatingChart" width="400" height="200"></canvas>
    </div>
    <div class="chart-wrapper">
        <h3>Top 5 Lowest Ratings</h3>
        <canvas id="lowestRatingChart" width="400" height="200"></canvas>
    </div>
</div>



@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Stock Quantity Data
            var topStockData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopProductsByStock.Select(p => new { p.ProductName, p.StockQuantity })));
            var bottomStockData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.BottomProductsByStock.Select(p => new { p.ProductName, p.StockQuantity })));

            // Price Data
            var highestPriceData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopProductsByHighestPrice.Select(p => new { p.ProductName, p.Price })));
            var lowestPriceData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopProductsByLowestPrice.Select(p => new { p.ProductName, p.Price })));

            // Rating Data
            var highestRatingData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopProductsByHighestRating.Select(p => new { p.ProductName, p.AverageRating })));
            var lowestRatingData = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.TopProductsByLowestRating.Select(p => new { p.ProductName, p.AverageRating })));

            // Top Stock Chart
            new Chart(document.getElementById('topStockChart').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: topStockData.map(data => data.ProductName.length > 10 ? data.ProductName.substring(0, 10) + '...' : data.ProductName),
                    datasets: [{
                        label: 'Stock Quantity',
                        data: topStockData.map(data => data.StockQuantity),
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: (items) => topStockData[items[0].dataIndex].ProductName
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Product'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Stock Quantity'
                            }
                        }
                    }
                }
            });

            // Bottom Stock Chart
            new Chart(document.getElementById('bottomStockChart').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: bottomStockData.map(data => data.ProductName.length > 10 ? data.ProductName.substring(0, 10) + '...' : data.ProductName),
                    datasets: [{
                        label: 'Stock Quantity',
                        data: bottomStockData.map(data => data.StockQuantity),
                        backgroundColor: 'rgba(255, 159, 64, 0.2)',
                        borderColor: 'rgba(255, 159, 64, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: (items) => bottomStockData[items[0].dataIndex].ProductName
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Product'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Stock Quantity'
                            }
                        }
                    }
                }
            });

            // Highest Price Chart
            new Chart(document.getElementById('highestPriceChart').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: highestPriceData.map(data => data.ProductName.length > 10 ? data.ProductName.substring(0, 10) + '...' : data.ProductName),
                    datasets: [{
                        label: 'Price',
                        data: highestPriceData.map(data => data.Price),
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: (items) => highestPriceData[items[0].dataIndex].ProductName
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Product'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Price'
                            }
                        }
                    }
                }
            });

            // Lowest Price Chart
            new Chart(document.getElementById('lowestPriceChart').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: lowestPriceData.map(data => data.ProductName.length > 10 ? data.ProductName.substring(0, 10) + '...' : data.ProductName),
                    datasets: [{
                        label: 'Price',
                        data: lowestPriceData.map(data => data.Price),
                        backgroundColor: 'rgba(255, 205, 86, 0.2)',
                        borderColor: 'rgba(255, 205, 86, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: (items) => lowestPriceData[items[0].dataIndex].ProductName
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Product'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Price'
                            }
                        }
                    }
                }
            });

            // Highest Rating Chart
            new Chart(document.getElementById('highestRatingChart').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: highestRatingData.map(data => data.ProductName.length > 10 ? data.ProductName.substring(0, 10) + '...' : data.ProductName),
                    datasets: [{
                        label: 'Average Rating',
                        data: highestRatingData.map(data => data.AverageRating),
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: (items) => highestRatingData[items[0].dataIndex].ProductName
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Product'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Average Rating'
                            }
                        }
                    }
                }
            });

            // Lowest Rating Chart
            new Chart(document.getElementById('lowestRatingChart').getContext('2d'), {
                type: 'bar',
                data: {
                    labels: lowestRatingData.map(data => data.ProductName.length > 10 ? data.ProductName.substring(0, 10) + '...' : data.ProductName),
                    datasets: [{
                        label: 'Average Rating',
                        data: lowestRatingData.map(data => data.AverageRating),
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            callbacks: {
                                title: (items) => lowestRatingData[items[0].dataIndex].ProductName
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Product'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Average Rating'
                            }
                        }
                    }
                }
            });
        });
    </script>
}

<style>
    .btn-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

        .btn-container .btn {
            flex: 1;
            margin: 0 10px;
        }

    .chart-container {
        display: flex;
        justify-content: center;
        gap: 80px;
        margin-bottom: 20px;
    }

    .chart-wrapper {
        flex: 1;
        min-width: 300px; /* Adjust as needed for responsiveness */
        max-width: 500px;
        height: 300px; /* Set a fixed height for balancing */
    }

    .more-stats {
        text-align: right;
        margin-top: 20px;
    }

        .more-stats .btn-link {
            text-decoration: none;
        }
</style>


